package com.zowak.rasterrizer.imageloadform;




import com.zowak.rasterrizer.RasterImage;
import com.zowak.rasterrizer.grids.AllignmentGrid;
import com.zowak.rasterrizer.commandmanager.CommandManager;
import java.awt.Color;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import com.zowak.rasterrizer.colorlist.ColorListCellRenderer;
import java.awt.Point;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author christophnowak
 */
public class imageLoadDialog extends javax.swing.JDialog implements DropTargetListener{

    /**
     * Creates new form imageLoadWindow
     */
    public imageLoadDialog() {
        super(null,ModalityType.APPLICATION_MODAL);
        
        initComponents();
        for(Color c : default_colors){
            colorModel.addElement(c);
        }
        rasterToggle.setSelected(allignmentGrid.rasterStatus());
        allignmentGrid.setColorSet(getColors());
        allignmentGrid.setRasterDimensions((int)rasterWidthSpinner.getValue(), (int)rasterHeightSpinner.getValue());
        cmdManager = new CommandManager(50);        
        isDragging = false;
        setDropTarget(new DropTarget(allignmentGrid,DnDConstants.ACTION_MOVE, this, true));
        
        updateGUIElements();
        
    }
    
    public imageLoadDialog(File file){
        this();
        allignmentGrid.loadOriginalImage(file);
        updateGUIElements();
    }
    
    public RasterImage getResultRaster(){
        return allignmentGrid.getRasteredImage();
    }
   
    public int getConfirmationOption(){
        return confirmationOption;
    }

    public Color[] getColors(){
        Color[] colors = new Color[colorModel.size()];
        
        for(int i = 0; i < colorModel.size(); i++){
            colors[i] = (Color)colorModel.getElementAt(i);
        }
        
        return (colors.length == 0) ? null : colors;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editScrollPane = new javax.swing.JScrollPane();
        allignmentGrid = new AllignmentGrid();
        colorMenuPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        colorModel = new DefaultListModel();
        colorList = new javax.swing.JList<>(colorModel);
        addColorButton = new javax.swing.JButton();
        removeColorButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        rasterSettingsPanel = new javax.swing.JPanel();
        rasterToggle = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        rasterUnitSizeSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        rasterWidthSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        rasterHeightSpinner = new javax.swing.JSpinner();
        OKButton = new javax.swing.JButton();
        AbortButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        loadPic = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        picZoomSlider = new javax.swing.JSlider();
        rasterImageToggle = new javax.swing.JToggleButton();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lade Bild");
        setAlwaysOnTop(true);

        allignmentGrid.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                allignmentGridMouseDragged(evt);
            }
        });
        allignmentGrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                allignmentGridMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout allignmentGridLayout = new javax.swing.GroupLayout(allignmentGrid);
        allignmentGrid.setLayout(allignmentGridLayout);
        allignmentGridLayout.setHorizontalGroup(
            allignmentGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 569, Short.MAX_VALUE)
        );
        allignmentGridLayout.setVerticalGroup(
            allignmentGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );

        editScrollPane.setViewportView(allignmentGrid);

        colorList.setModel(colorModel);
        jScrollPane1.setViewportView(colorList);
        colorList.setCellRenderer(new ColorListCellRenderer());

        addColorButton.setText("+");
        addColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColorButtonActionPerformed(evt);
            }
        });

        removeColorButton.setText("-");
        removeColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeColorButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Farben");

        javax.swing.GroupLayout colorMenuPaneLayout = new javax.swing.GroupLayout(colorMenuPane);
        colorMenuPane.setLayout(colorMenuPaneLayout);
        colorMenuPaneLayout.setHorizontalGroup(
            colorMenuPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(colorMenuPaneLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(colorMenuPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        colorMenuPaneLayout.setVerticalGroup(
            colorMenuPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorMenuPaneLayout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorMenuPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeColorButton)
                    .addComponent(addColorButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rasterToggle.setText("Rasterlinien");
        rasterToggle.setFocusable(false);
        rasterToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rasterToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rasterToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rasterToggleActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        jLabel2.setText("größe");

        rasterUnitSizeSpinner.setValue(25);
        rasterUnitSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rasterUnitSizeSpinnerStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Dimension:");

        rasterWidthSpinner.setValue(25);
        rasterWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rasterWidthSpinnerStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        jLabel4.setText("x");

        rasterHeightSpinner.setValue(25);
        rasterHeightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rasterHeightSpinnerStateChanged(evt);
            }
        });

        OKButton.setText("Übernehmen");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        AbortButton.setText("Abbrechen");
        AbortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbortButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rasterSettingsPanelLayout = new javax.swing.GroupLayout(rasterSettingsPanel);
        rasterSettingsPanel.setLayout(rasterSettingsPanelLayout);
        rasterSettingsPanelLayout.setHorizontalGroup(
            rasterSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rasterSettingsPanelLayout.createSequentialGroup()
                .addComponent(rasterToggle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rasterUnitSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rasterWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rasterHeightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AbortButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OKButton))
        );
        rasterSettingsPanelLayout.setVerticalGroup(
            rasterSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rasterSettingsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(rasterSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rasterToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rasterSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rasterHeightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rasterUnitSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(rasterWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel2)
                        .addComponent(OKButton)
                        .addComponent(AbortButton)))
                .addGap(0, 0, 0))
        );

        loadPic.setText("Bild laden");
        loadPic.setFocusable(false);
        loadPic.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadPic.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadPic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadPicActionPerformed(evt);
            }
        });

        jLabel1.setText("Bild zoom:");

        picZoomSlider.setMaximum(400);
        picZoomSlider.setMinimum(1);
        picZoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                picZoomSliderStateChanged(evt);
            }
        });

        rasterImageToggle.setText("Rasterbild zeigen");
        rasterImageToggle.setFocusable(false);
        rasterImageToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rasterImageToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rasterImageToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rasterImageToggleActionPerformed(evt);
            }
        });

        undoButton.setText("<-");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        redoButton.setText("->");
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(loadPic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(picZoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rasterImageToggle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(undoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(picZoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rasterImageToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadPic)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(undoButton)
                    .addComponent(redoButton))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(colorMenuPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(editScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(rasterSettingsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editScrollPane)
                    .addComponent(colorMenuPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rasterSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rasterToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rasterToggleActionPerformed
        allignmentGrid.setRaster(rasterToggle.isSelected());
    }//GEN-LAST:event_rasterToggleActionPerformed

    private void addColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColorButtonActionPerformed
        Color new_color = JColorChooser.showDialog(this, "Farbe hinzufügen", Color.white);
        
        if(new_color != null){
            //colorModel.addElement(new_color);
            cmdManager.runCommand(new AddColorCmd(new_color, colorModel));
        }
        //allignmentGrid.setColorSet(getColors());
        updateGUIElements();
    }//GEN-LAST:event_addColorButtonActionPerformed

    private void removeColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeColorButtonActionPerformed
        int idx = colorList.getSelectedIndex();
        
        if( idx != -1){
            //colorModel.remove(idx);
            cmdManager.runCommand(new RemoveColorCmd(idx, (Color)colorModel.get(idx), colorModel));
            if(colorModel.size() > 0 ) colorList.setSelectedIndex(idx - 1);
        }
        //allignmentGrid.setColorSet(getColors());
        updateGUIElements();
    }//GEN-LAST:event_removeColorButtonActionPerformed

    private void rasterUnitSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rasterUnitSizeSpinnerStateChanged
        allignmentGrid.setRastersize((int)rasterUnitSizeSpinner.getValue());
    }//GEN-LAST:event_rasterUnitSizeSpinnerStateChanged

    private void loadPicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPicActionPerformed
        loadTemplateImage();
    }//GEN-LAST:event_loadPicActionPerformed

    private void rasterImageToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rasterImageToggleActionPerformed
        allignmentGrid.setRasteredImageVisible(rasterImageToggle.isSelected());
    }//GEN-LAST:event_rasterImageToggleActionPerformed

    private void picZoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_picZoomSliderStateChanged
        allignmentGrid.scaleOriginalImage(picZoomSlider.getValue() * 0.01f);
    }//GEN-LAST:event_picZoomSliderStateChanged

    private void rasterHeightSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rasterHeightSpinnerStateChanged
        allignmentGrid.setRasterDimensions((int)(rasterWidthSpinner.getValue()), (int)(rasterHeightSpinner.getValue()));
    }//GEN-LAST:event_rasterHeightSpinnerStateChanged

    private void editRasterPaneMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editRasterPaneMouseDragged
       
    }//GEN-LAST:event_editRasterPaneMouseDragged

    private void rasterWidthSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rasterWidthSpinnerStateChanged
        allignmentGrid.setRasterDimensions((int)(rasterWidthSpinner.getValue()), (int)(rasterHeightSpinner.getValue()));
    }//GEN-LAST:event_rasterWidthSpinnerStateChanged

    private void AbortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbortButtonActionPerformed
        confirmationOption = STATUS_ABORTED;
        dispose();
    }//GEN-LAST:event_AbortButtonActionPerformed

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        confirmationOption = STAUTS_OK;
        dispose();
    }//GEN-LAST:event_OKButtonActionPerformed

    private void allignmentGridMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allignmentGridMouseDragged
         if(evt.getButton() == MouseEvent.BUTTON1){
              allignmentGrid.moveTemplateTo(evt.getPoint());
             if(!isDragging){
                draggStart = allignmentGrid.getTemplateLocation();
                isDragging = true;
             }
        }
    }//GEN-LAST:event_allignmentGridMouseDragged

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        if(cmdManager.undoable()) {
            cmdManager.undo();
            updateGUIElements();
        }
    }//GEN-LAST:event_undoButtonActionPerformed

    private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
        if(cmdManager.redoable()){
            cmdManager.redo();
            updateGUIElements();
        }
    }//GEN-LAST:event_redoButtonActionPerformed

    private void allignmentGridMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allignmentGridMouseReleased
         if(evt.getButton() == MouseEvent.BUTTON1 && isDragging){
            cmdManager.runCommand(new MoveTemplateCmd(allignmentGrid, evt.getPoint(), draggStart));
            isDragging = false;
            updateGUIElements();
        }
    }//GEN-LAST:event_allignmentGridMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(imageLoadDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(imageLoadDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(imageLoadDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(imageLoadDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new imageLoadDialog().setVisible(true);
            }
        });
    }
    private DefaultListModel colorModel;
    public static Color[] default_colors = new Color[]{
               Color.BLACK,
               Color.WHITE,
               Color.BLUE,
               Color.GREEN,
               Color.RED,
               Color.CYAN,
               Color.YELLOW,
               Color.GRAY,
               Color.DARK_GRAY,
               Color.MAGENTA,
               Color.ORANGE,

       };
    
    public final static int STATUS_ABORTED = 1;
    public final static int STAUTS_OK = 0;
    public final static int STAUTS_NOTHING = -1;
    private final CommandManager cmdManager;
    private int confirmationOption = STAUTS_NOTHING;
    private boolean isDragging;
    private Point draggStart;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AbortButton;
    private javax.swing.JButton OKButton;
    private javax.swing.JButton addColorButton;
    private AllignmentGrid allignmentGrid;
    private javax.swing.JList<String> colorList;
    private javax.swing.JPanel colorMenuPane;
    private javax.swing.JScrollPane editScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadPic;
    private javax.swing.JSlider picZoomSlider;
    private javax.swing.JSpinner rasterHeightSpinner;
    private javax.swing.JToggleButton rasterImageToggle;
    private javax.swing.JPanel rasterSettingsPanel;
    private javax.swing.JToggleButton rasterToggle;
    private javax.swing.JSpinner rasterUnitSizeSpinner;
    private javax.swing.JSpinner rasterWidthSpinner;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton removeColorButton;
    private javax.swing.JButton undoButton;
    // End of variables declaration//GEN-END:variables

    private void loadTemplateImage() {
        //JFileChooser fileChooser = new JFileChooser("/Users/christophnowak/NetBeansProjects/RasterRizer/src/main/resources/");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int option = fileChooser.showDialog(this, "Laden");
        
        if(option == JFileChooser.APPROVE_OPTION){
            allignmentGrid.loadOriginalImage(fileChooser.getSelectedFile());
            cmdManager.clear();
            updateGUIElements();
        }
    }
    
    private void updateGUIElements(){
        
        undoButton.setEnabled(cmdManager.undoable());
        redoButton.setEnabled(cmdManager.redoable());
        allignmentGrid.setColorSet(getColors());
        
        OKButton.setEnabled(allignmentGrid.getRasteredImage() != null);
        
    }

    @Override
    public void dragEnter(DropTargetDragEvent dtde) {
    }

    @Override
    public void dragOver(DropTargetDragEvent dtde) {
    }

    @Override
    public void dropActionChanged(DropTargetDragEvent dtde) {
    }

    @Override
    public void dragExit(DropTargetEvent dte) {
    }

    @Override
    public void drop(DropTargetDropEvent dtde) {
        if(!dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) return;
        
        dtde.acceptDrop(DnDConstants.ACTION_COPY);
        
        try {
            
            Transferable transferable = dtde.getTransferable();
                    
            List files = (List)transferable.getTransferData(DataFlavor.javaFileListFlavor);
            
            allignmentGrid.loadOriginalImage((File)files.get(0));
            updateGUIElements();
        } catch (UnsupportedFlavorException | IOException ex) {
            Logger.getLogger(AllignmentGrid.class.getName()).log(Level.SEVERE, null, ex);
            dtde.rejectDrop();
        }
    }
}
