package com.zowak.rasterrizer.mainform;

import com.zowak.rasterrizer.viewform.ViewScreen;
import com.zowak.rasterrizer.commandmanager.CommandManager;
import com.zowak.rasterrizer.imageloadform.imageLoadDialog;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.io.File;
import javax.swing.JFileChooser;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author christophnowak
 */
public class Main extends javax.swing.JFrame  {


    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        cmdManager = new CommandManager(50);
        updateGUIElements();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editOptionGroup = new javax.swing.ButtonGroup();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        toolBar = new javax.swing.JToolBar();
        createRasterImage = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        zoomOutButton = new javax.swing.JButton();
        zoomInButton = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        viewButton = new javax.swing.JButton();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        editScrollPane = new javax.swing.JScrollPane();
        editGrid = new com.zowak.rasterrizer.grids.EditGrid();
        viewOptionsSettings = new javax.swing.JPanel();
        colorPickGrid = new com.zowak.rasterrizer.grids.ColorPickGrid();
        selectedColorPanel = new javax.swing.JPanel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toolBar.setRollover(true);
        toolBar.setToolTipText("");

        createRasterImage.setText("Rasterbild erstellen...");
        createRasterImage.setFocusable(false);
        createRasterImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createRasterImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createRasterImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRasterImageActionPerformed(evt);
            }
        });
        toolBar.add(createRasterImage);
        toolBar.add(filler1);

        zoomOutButton.setText("-");
        zoomOutButton.setEnabled(false);
        zoomOutButton.setFocusable(false);
        zoomOutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomOutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });
        toolBar.add(zoomOutButton);

        zoomInButton.setText("+");
        zoomInButton.setEnabled(false);
        zoomInButton.setFocusable(false);
        zoomInButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomInButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });
        toolBar.add(zoomInButton);
        toolBar.add(filler2);

        saveButton.setText("speichern");
        saveButton.setEnabled(false);
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        toolBar.add(saveButton);

        loadButton.setText("laden");
        loadButton.setFocusable(false);
        loadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        toolBar.add(loadButton);
        toolBar.add(filler3);

        viewButton.setText("anzeigen");
        viewButton.setEnabled(false);
        viewButton.setFocusable(false);
        viewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        viewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });
        toolBar.add(viewButton);
        toolBar.add(filler4);

        undoButton.setText("<-");
        undoButton.setFocusable(false);
        undoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        undoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });
        toolBar.add(undoButton);

        redoButton.setText("->");
        redoButton.setFocusable(false);
        redoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        redoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });
        toolBar.add(redoButton);

        editScrollPane.setViewportView(editGrid);

        editGrid.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                editGridMouseDragged(evt);
            }
        });
        editGrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editGridMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout editGridLayout = new javax.swing.GroupLayout(editGrid);
        editGrid.setLayout(editGridLayout);
        editGridLayout.setHorizontalGroup(
            editGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1107, Short.MAX_VALUE)
        );
        editGridLayout.setVerticalGroup(
            editGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 581, Short.MAX_VALUE)
        );

        editScrollPane.setViewportView(editGrid);

        javax.swing.GroupLayout viewOptionsSettingsLayout = new javax.swing.GroupLayout(viewOptionsSettings);
        viewOptionsSettings.setLayout(viewOptionsSettingsLayout);
        viewOptionsSettingsLayout.setHorizontalGroup(
            viewOptionsSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        viewOptionsSettingsLayout.setVerticalGroup(
            viewOptionsSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        colorPickGrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                colorPickGridMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout colorPickGridLayout = new javax.swing.GroupLayout(colorPickGrid);
        colorPickGrid.setLayout(colorPickGridLayout);
        colorPickGridLayout.setHorizontalGroup(
            colorPickGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        colorPickGridLayout.setVerticalGroup(
            colorPickGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 256, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout selectedColorPanelLayout = new javax.swing.GroupLayout(selectedColorPanel);
        selectedColorPanel.setLayout(selectedColorPanelLayout);
        selectedColorPanelLayout.setHorizontalGroup(
            selectedColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );
        selectedColorPanelLayout.setVerticalGroup(
            selectedColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 33, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewOptionsSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 923, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(colorPickGrid, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectedColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 68, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewOptionsSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(colorPickGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void graphicPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphicPanelMouseDragged


    }//GEN-LAST:event_graphicPanelMouseDragged

    private void colorSetListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_colorSetListKeyTyped

    }//GEN-LAST:event_colorSetListKeyTyped


    private void graphicPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphicPanelMouseClicked

    }//GEN-LAST:event_graphicPanelMouseClicked

    private void callRasterImageDialog(File file){
        
        imageLoadDialog diag;
        
        if(file == null){
             diag = new imageLoadDialog();
        }else{
            diag = new imageLoadDialog(file);
        }
        diag.setVisible(true);
        
        if(diag.getConfirmationOption() == imageLoadDialog.STAUTS_OK){


            // editGrid.setRasteredImage(diag.getResultRaster());
            // colorPickGrid.setColors(diag.getColors());

            cmdManager.runCommand(new SetRasterImageCmd(
                                        diag.getResultRaster(),
                                        editGrid.getRasteredImage(),
                                        diag.getColors(),
                                        colorPickGrid.getColors(),
                                        editGrid,
                                        colorPickGrid));

            updateGUIElements();
        }
                
    }
    
    private void createRasterImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRasterImageActionPerformed
        callRasterImageDialog(null);

    }//GEN-LAST:event_createRasterImageActionPerformed

    private void editGridMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editGridMouseDragged
        if(evt.getButton() == MouseEvent.BUTTON1 && editGrid.getRasteredImage() != null){
            Color current_color = editGrid.getColorAt(evt.getPoint());

            if(! selectedColorPanel.getBackground().equals(current_color)){
                 cmdManager.runCommand(new SetColorOnGridCmd(
                                                    evt.getPoint(),
                                                    selectedColorPanel.getBackground(),
                                                    current_color,
                                                    editGrid));
            }
           updateGUIElements();
        }else if(evt.getButton() == MouseEvent.BUTTON3 && editGrid.getRasteredImage() != null){
            Color new_color = editGrid.getColorAt(evt.getPoint());
            if(new_color != null) selectedColorPanel.setBackground(new_color);
        }
    }//GEN-LAST:event_editGridMouseDragged

    private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
        editGrid.increaseRasterSize(-5);
        editScrollPane.revalidate();
    }//GEN-LAST:event_zoomOutButtonActionPerformed

    private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
        editGrid.increaseRasterSize( 5);
        editScrollPane.revalidate();
    }//GEN-LAST:event_zoomInButtonActionPerformed

    private void colorPickGridMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorPickGridMouseClicked

        selectedColorPanel.setBackground(colorPickGrid.getColorAt(evt.getPoint()));
    }//GEN-LAST:event_colorPickGridMouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        //JFileChooser fileChooser = new JFileChooser("/Users/christophnowak/NetBeansProjects/RasterRizer/src/main/resources/");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Raster speichern");
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int option = fileChooser.showDialog(this, "Speichern");

        if(option == JFileChooser.APPROVE_OPTION){
            editGrid.saveRasterImage(fileChooser.getSelectedFile());
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        //JFileChooser fileChooser = new JFileChooser("/Users/christophnowak/NetBeansProjects/RasterRizer/src/main/resources/");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Raster laden");
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int option = fileChooser.showDialog(this, "Laden");

        if(option == JFileChooser.APPROVE_OPTION){
            editGrid.loadRasterImage(fileChooser.getSelectedFile());
            Color[] colors = editGrid.getRasteredImage().getColors();
            colorPickGrid.setColors(colors);
            cmdManager.clear();
            updateGUIElements();
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        ViewScreen vs = new ViewScreen();
        vs.setRasterImage(editGrid.getRasteredImage());
        vs.setVisible(true);
    }//GEN-LAST:event_viewButtonActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        if(cmdManager.undoable()){
            cmdManager.undo();
            updateGUIElements();
        }
    }//GEN-LAST:event_undoButtonActionPerformed

    private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
        if(cmdManager.redoable()){
            cmdManager.redo();
            updateGUIElements();
        }
    }//GEN-LAST:event_redoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    private void updateGUIElements(){
        boolean rasterimage_flag = (editGrid.getRasteredImage() != null);
        zoomInButton.setEnabled(rasterimage_flag);
        zoomOutButton.setEnabled(rasterimage_flag);
        saveButton.setEnabled(rasterimage_flag);
        viewButton.setEnabled(rasterimage_flag);

        undoButton.setEnabled(cmdManager.undoable());
        redoButton.setEnabled(cmdManager.redoable());


    }

    private CommandManager cmdManager;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.zowak.rasterrizer.grids.ColorPickGrid colorPickGrid;
    private javax.swing.JButton createRasterImage;
    private com.zowak.rasterrizer.grids.EditGrid editGrid;
    private javax.swing.ButtonGroup editOptionGroup;
    private javax.swing.JScrollPane editScrollPane;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel selectedColorPanel;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JButton undoButton;
    private javax.swing.JButton viewButton;
    private javax.swing.JPanel viewOptionsSettings;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOutButton;
    // End of variables declaration//GEN-END:variables

    

}
